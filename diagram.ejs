<html>
  <head>
    <meta charset="utf-8">
    <title>State Diagram</title>

   
    <script src="http://cpettitt.github.io/project/dagre-d3/latest/dagre-d3.js" charset="utf-8"></script>
   
    <script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <style id="css">
    body {
      font: 300 14px 'Helvetica Neue', Helvetica;
    }

    .node rect {
      stroke: #333;
      fill: #fff;
    }

    .edgePath path {
      stroke: #333;
      fill: #333;
      stroke-width: 1.5px;
    }
    </style>

  </head>
  <body>
  <svg height="655" width="960">
    <g></g>
  </svg>
  <script>
    var g = new dagreD3.graphlib.Graph().setGraph({});

  // States and transitions from RFC 793
  var states = <%-JSON.stringify(states)%>;
  
  var stateMap = <%-JSON.stringify(stateMap)%>;

  var labels = <%-JSON.stringify(labels)%>;
  var startStates = [];
  var terminatingStates = [];
 
  // Automatically label each of the nodes
  for (var key in stateMap) {
    if (stateMap.hasOwnProperty(key)) {
      g.setNode(key, { label: stateMap[key].label });
      if(stateMap[key].start === true) {
        startStates.push(key);
      }
      if(stateMap[key].terminating === true) {
        terminatingStates.push(key);
      } 
    }
  }
  
  states.forEach(function (state) { 
    
    if (stateMap[state].canGoTo) {
      /*TODO: To find a better way than using two replaces */
      var edges = stateMap[state].canGoTo.replace('\^\(', '').replace('\)\$', '').split('|');
      edges.forEach(function (edge){
        g.setEdge(state, edge, { label: state });    
      });
    }
     
  });
  
  

  
  // Set some general styles
  g.nodes().forEach(function(v) {
    var node = g.node(v);
    if (node) {
      node.rx = node.ry = 5;
    }
  });

  // Add some custom colors based on state
  startStates.forEach(function (state){
    g.node(state).style = "fill: #f77";  
  });

  terminatingStates.forEach(function (state){
    g.node(state).style = "fill: #f77";  
  });
 

  var svg = d3.select("svg"),
      inner = svg.select("g");

  // Set up zoom support
  var zoom = d3.behavior.zoom().on("zoom", function() {
        inner.attr("transform", "translate(" + d3.event.translate + ")" +
                                    "scale(" + d3.event.scale + ")");
      });
  svg.call(zoom);

  // Create the renderer
  var render = new dagreD3.render();

  // Run the renderer. This is what draws the final graph.
  render(inner, g);

  // Center the graph
  var initialScale = 0.75;
  zoom
    .translate([(svg.attr("width") - g.graph().width * initialScale) / 2, 20])
    .scale(initialScale)
    .event(svg);
  svg.attr('height', g.graph().height * initialScale + 40);


  </script>
</body>
</html>